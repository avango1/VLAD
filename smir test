Вопросы на экзамен ПРОЕКТИРОВАНИЕ И АДМИНИСТРИРОВАНИЕ ХРАНИЛИЩ И БАЗ ДАННЫХ, ЧАСТЬ 2 
1. Причины перепроектирования многопользовательских баз данных. (Коптелова)
2 основные:
Проблема комплексности (сложности) проекта МБД. Безошибочно спроектировать БД с первого раза непросто даже для компактных моделей баз данных для небольших приложений.
Взаимное влияние ИС и организаций друг на друга. Происходит взаимное эволюционное изменение IT-инфраструктуры организаций и их организационной архитектуры. 
Стандартные:
Увеличение компании за счет новых дивизионов
Выход на новые рынки.
Добавление новых продуктов/услуг
Переход на новую форму функционирования.
Внедрение новых политик безопасности информации.
Внедрение новых политик хранения информации
прочее

2. Применение инструментов прямого и обратного инжиниринга в базах данных. (Гладченко (Чат гпт))
Прямой и обратный инжиниринг в базах данных — это методики, используемые для анализа, проектирования и реорганизации структуры данных, а также для оптимизации работы базы данных. Рассмотрим их применение подробнее.

1. Прямой инжиниринг
Прямой инжиниринг (forward engineering) предполагает создание структуры базы данных с нуля на основе проектной документации, требований к системе или моделей данных.
Применение:
Разработка новых баз данных:
Построение таблиц, связей, индексов и других структур на основе концептуальной (ER-диаграмм), логической и физической модели данных.
Определение ограничений (ключи, внешние ключи, уникальные индексы).
Автоматизация создания базы данных:
Использование CASE-средств (Computer-Aided Software Engineering) для генерации SQL-скриптов по подготовленным моделям.
Например, инструменты вроде ERwin, MySQL Workbench, Oracle Designer.
Модернизация существующих баз данных:
Реорганизация структуры для повышения производительности (добавление индексов, нормализация данных).
Изменение структуры под новые бизнес-процессы.
Интеграция с другими системами:
Построение схем для взаимодействия базы с внешними приложениями, веб-сервисами или API.

2. Обратный инжиниринг
Обратный инжиниринг (reverse engineering) направлен на анализ существующей базы данных для восстановления её структуры или понимания её работы без наличия документации.
Применение:
Восстановление документации:
Если база данных разрабатывалась без документации, можно сгенерировать её с помощью специализированных инструментов (например, DbSchema, SQL Power Architect).
Миграция данных:
Анализ структуры базы данных для подготовки к переносу данных в другие системы (ETL-процессы).
Определение зависимостей между таблицами.
Рефакторинг и оптимизация:
Обнаружение проблем в проектировании (избыточные или дублирующие таблицы, неиспользуемые индексы).
Переход к нормализованной форме данных или денормализация для повышения производительности.
Безопасность и аудит:
Анализ схемы базы данных для выявления уязвимостей (например, открытые связи, ошибки в ограничениях).
Интеграция и анализ:
Создание визуальных моделей для упрощения понимания структуры базы и её взаимосвязей.
Построение диаграмм (ER-диаграмм) существующей базы для последующей разработки.

Инструменты для работы с прямым и обратным инжинирингом
Прямой инжиниринг:
MySQL Workbench.
Microsoft SQL Server Management Studio (SSMS).
Oracle SQL Developer.
ERwin Data Modeler.
Обратный инжиниринг:
DbSchema.
ApexSQL.
DataGrip.
Visual Paradigm.
SQL Power Architect.

3. Решение задач перепроектирования баз данных.(Гладченко(ЧатГПТ)) 
Решение задач перепроектирования баз данных включает несколько ключевых этапов:
Анализ текущей структуры
Выявление проблем: избыточность данных, отсутствие индексов, низкая производительность.
Использование инструментов обратного инжиниринга (DbSchema, Visual Paradigm).
Разработка новой модели
Построение ER-диаграммы.
Нормализация данных для устранения дублирования.
Определение индексов, ключей и связей.
Миграция данных
Подготовка ETL-процессов для переноса данных.
Проверка целостности и актуальности данных.
Оптимизация и тестирование
Настройка индексов, запросов, триггеров.
Тестирование производительности и функциональности.
Документирование и внедрение
Создание документации для разработчиков и администраторов.
Постепенное внедрение изменений с минимальным простоем системы.
Инструменты: MySQL Workbench, DataGrip, ERwin, SQL Server Management Studio.

4. Ключевые трудовые функции администратора МБД (Захаров)
1. Интеграции в бизнес-процессы организаций многопользовательских баз данных;
2. Создание и эксплуатация баз данных;
3. Мониторинг безопасного функционирования серверов многопользовательских баз данных;
4. Выполнять процедуру перепроектирования;
5. Проведение мероприятий по резервному копированию (backup) и восстановлению (restore);
6. Выполнять репликацию базы данных.

5. Применение транзакций в процессе параллельной обработки данных. (Гладченко (ЧатГПТ))
Транзакции обеспечивают целостность и согласованность данных при параллельной обработке в базах данных.
Основные аспекты применения:
ACID-свойства:
Атомарность: Все операции транзакции выполняются или откатываются полностью.
Согласованность: Данные переходят из одного корректного состояния в другое.
Изолированность: Параллельные транзакции не влияют друг на друга.
Долговечность: Результаты успешных транзакций сохраняются даже после сбоев.
Изоляция транзакций:
Уровни изоляции (Read Uncommitted, Read Committed, Repeatable Read, Serializable) предотвращают конфликты (грязное чтение, фантомы, потерянные обновления).
Управление конкурентным доступом:
Блокировки: Используются для предотвращения одновременного изменения одних и тех же данных.
Версионность: Снимки данных позволяют параллельно читать их без блокировок (например, MVCC).
Использование в системах:
Онлайн-магазины, банковские системы, аналитика в реальном времени.
Инструменты: PostgreSQL, MySQL (InnoDB), Oracle Database, SQL Server.

6. Описание проблемы потерянного обновления в процессе параллельной обработки данных (Коптелова)
Применение транзакций при исполнении комплексных инструкций в СУБД решает базовые проблемы МБД, но параллельное применение транзакций может стать причиной возникновения аномалий.
Потерянное обновление (lost update) - аномалия, проявляющаяся, когда несколько разных транзакций изменяют один массив данных. При фиксировании результата получается, что одна транзакция изменила и переписала данные, внесенные другой транзакцией.
Для начала посмотрим, как СУБД обрабатывает параллельные транзакции в обычном режиме. Предположим, что два пользователя А и Б параллельно запустили две транзакции. Цель транзакции А – изменить и записать элемент 100 (значение в одной из строк таблицы базы данных), цель транзакции Б – изменить и записать элемент 200 (значение в другой строке, отличной от элемента 100). В этом случае транзакции пройдут в штатном режиме, не создавая проблем с феноменами. Последовательность обработки транзакций на стороне СУБД показана на рис. 7. 

Пользователи А и Б получают в результате запроса текущее значение элемента 100 и 200 соответственно. Получивший приоритет пользователь А (например, он обратился раньше) получает возможность с помощью транзакции изменить и записать изменения в элементе 100. После этого возможность изменить и записать изменения в элементе 200 получает пользователь Б. После этих инструкций БД остается в согласованном состоянии, поскольку транзакции друг другу «не мешали».
Аномалия потерянного обновления возникнет, когда параллельные транзакции попытаются изменить и записать изменения одного элемента БД. Пример аномалии показан на рис. 8. (последовательность действий идентична рисунку 7).

В данном случае будет потеряна транзакция, уменьшающая количество элементов на 5 (10 – 5 = 5), поскольку сразу после нее будет выполнена транзакция, уменьшающая начальное количество элементов на 3 (10 – 3 = 7). Результат второй транзакции и станет последним записанным значением. 
7. Принцип блокировки. Оптимистическая и пессимистическая блокировки. (Захаров)
 С помощью блокировок проектировщик может заблокировать на время транзакции как таблицы базы данных, так и отдельные строки таблиц.
Блокировки делятся на оптимистические и пессимистические.
Принцип оптимистической блокировки: все пройдет хорошо, процесс будет успешный, конфликта транзакции не случится. Если случится конфликт – переделаем транзакцию столько раз, сколько нужно для отсутствия конфликта. Блокировка будет установлена только на время исполнения инструкций, изменяющих данные. 
Принцип пессимистической блокировки: все пройдет плохо, обязательно может случиться конфликт. Элемент, подлежащий изменению, блокируется на все время прохождения транзакции до ее успешного завершения. Блокируются все инструкции, входящие в транзакцию.
8. Описание уровней изоляций транзакций (Коптелова. Файл + вики)
Общий стандарт SQL подразумевает 4 уровня изоляции:
Read Uncommitted (незавершенное чтение): Транзакция видит незафиксированные изменения других транзакций.
Read Committed (завершенное чтение): Транзакция видит только зафиксированные изменения.
Repeatable Read (повторное чтение): Данные в транзакции остаются неизменными.
Serializable (сериализация): Транзакции полностью изолированы.
Реакции уровней изоляции на возможные аномалии:


9. Базовая структура журнала транзакций. (Захаров)
Журнал транзакций – один из ключевых элементов СУБД. В этот файл записываются все транзакции, которые были осуществлены в соответствующей СУБД. Именно благодаря этому файлу, который ведется СУБД в автоматическом режиме, сама СУБД сможет определить, когда, где и какие изменения были осуществлены пользователями в базе данных. Это является критически важным при многих системных процедурах СУБД, не исключая процедуры восстановления баз данных. Упрощенная типовая структура журнала транзакций показана на рис. 13. 

Идентификатор транзакции – уникальный номер, выдаваемый каждой транзакции СУБД, позволяющий однозначно отличить одну транзакцию от всех остальных. 
Указатель назад – номер этапа транзакции, на котором осуществляется указанное в данной записи действие. Указатель назад в положении 0 говорит о начале транзакции на этом этапе. 
Указатель вперед – номер следующего этапа транзакции. Указатель вперед в положении 0 говорит об окончании транзакции на этом этапе. 
Время – системное время в момент, когда было осуществлено действие в рамках транзакции. 
Тип операции – одна из инструкций, входящих в состав транзакции (BEGIN, INSERT, UPDATE и так далее). 
Объект – объект БД, в котором были внесены изменения транзакцией. 
Исходный образ – значение до изменения транзакцией.
Конечный образ – значение после изменения транзакцией.
10. Структура таблицы плана резервного копирования. (Пакулин)
Резервное копирование базы данных – это процедура сохранения копии данных на носителе, не являющимся основным местом их хранения. Цель данной процедуры – получить возможность восстановления данных в случае их потери на основном сервере. Технически, для правильного проведения процедур резервного копирования, помимо скриптов, речь о которых пойдет ниже, необходимо иметь фундаментальное представление о структуре файлов баз данных, видах резервных копий и сопровождающей процесс документации. Структура необходимых знаний схематично показана на рис. 11.

11. Типичные ошибки при реализации резервного копирования.(Гладченко)
Удаление предыдущей копии бэкапа до создания новой.
Перезапись существующей БД при восстановлении из бэкапа. 
Хранение бэкапа и БД на одном физическом носителе (даже если это RAID массив)
Отсутствие проверки успешного окончания бэкапа
Отсутствие валидации бэкапов
Отсутствие контроля за свободным местом для бэкапа
Отсутствие контроля времени продолжительности бэкапа. 
Исполнение бекапа БД во время применения апдейтов ОС
“Криво” исполняемый файловый бэкап. 
 Замена бэкапа репликациями.
12. Схема отката и наката транзакций.(Гладченко)


13. Определение распределенных данных. Принцип работы распределенной транзакции. (Пакулин)
Распределённая база данных (DDB) - база данных, составные части которой размещаются в различных узлах компьютерной сети в соответствии с каким-либо критерием. 
Распределенная транзакция – транзакция, по определенным правилам собирающая в себе все актуальные изменения, которые происходят в распределенных базах данных, а затем управляющая процессом синхронизации массивов данных на всех узлах распределенных баз данных. 
Ключевым инструментом при осуществлении распределенных транзакций является Менеджер глобального восстановления (или проще - координатор). В ходе двухфазового подтверждения (все ли узлы готовы принять новые данные; везде ли распределенная транзакция завершилась успешно), этим менеджером осуществляется реализация актуальной распределенной транзакции на всех узлах распределенной сети. Схематично, распределенная транзакция показана на рис. 15.

14. Причины репликации баз данных. (Пакулин)
Обратите внимание на то, что процедура распределенной транзакции не закончится, пока координатор-менеджер не убедится в том, что транзакция была успешно выполнена на всех узлах распределенной базы данных. А представим, что этих узлов не 4-5, а 50-60. Какова вероятность быстро и успешно закончить распределенную транзакцию? Именно по причине наличия такого ограничения, в случае необходимости работы с распределенными базами данных администраторы предпочитают настраивать один из вариантов репликации. 
В настоящее время, помимо указанного выше требования «данные должны обрабатываться там, где они находятся», выделяют 4 основных причины применения инструмента репликации при обеспечении работы базы данных организации. 
1. Производительность и масштабируемость. Снятие с основного сервера базы данных части нагрузки по обработке данных. В основном это касается делегирования вспомогательным серверам инструкций по чтению и обработке данных. Чем больше операций чтения приходится на одну операцию записи, тем больше выгоды от репликации.
2. Отказоустойчивость. Если вдруг по какой-то причине, один или несколько вспомогательных серверов баз данных в репликации перестанут функционировать, главный сервер тут же может «перехватить» на себя операции, которые ранее выполняли вспомогательные серверы. Такие действия возможны и в обратном направлении, когда вспомогательный сервер на время выполняет функции записи и хранения данных, характерные для основного сервера. 
3. Резервное копирование данных. Существенно упрощается работа администратора, связанная с необходимостью создания резервных копий. Зачастую можно даже не руководствоваться бизнес требованиями и планами резервного копирования. Дело в том, что вспомогательный сервер в репликации можно остановить и снять резервную копию в любое время. 
4. Отложенные вычисления. Огромные по объему SQL запросы, которые регулярно и очень сильно нагружают вычислительные мощности основного сервера выгодно выполнять на отдельном вспомогательном сервере.
15. Определение публикаций и статей. Возможные фильтры статей. (Пакулин)
Публикация — информация, которая подвергается репликации. Одна публикация – это один согласованный набор данных. 
В состав публикации входят статьи, которые могут быть: 
целой таблицей или ее частью;
хранимой процедурой или представлением;
пользовательской функцией. 
Отметим, что для публикаций и статей (как для единиц данных для репликации) существует ряд важных ограничений:
Статья содержит данные из таблицы и одной или нескольких хранимых процедур.
Таблица может быть как целой, так и подмножеством. 
В публикации можно собрать несколько статей.
Каждая публикация должна содержать данные только из одной БД
Подписаться на статью нельзя.
На рис. 16 показаны фильтры, которые можно применить при формировании массива данных для статьи.

16. Типы подписок и типы репликации. (Пакулин)
Типы подписок
Инициализация подписки происходит push (принудительная) или pull (запрос) методом:

Ключевым различием является направление подписки. В случае push (принудительной) подписки, издатель обязует подписчика принять направленные ему публикации. Ключевой проблемой при этом является производительность распределенной базы данных, поскольку управление всеми подписками происходит централизованно, на стороне издателя. 
В случае pull (запроса) подписки, подписчик запрашивает необходимые ему публикации, и издатель в ответ их предоставляет. Ключевой проблемой является проблема безопасности, поскольку у большого количества подписчиков появится возможность формировать запросы к издателю.
Типы репликации
1. Репликация транзакций. Все транзакции, которые отмечены для репликации «вылавливаются» из журналов транзакций агентом чтения журналов (Log reader agent), после чего копируются в специальную системную базу данных distribution. Далее, с помощью распространителя (Distribution agent), транзакции распределяются по подписчикам, где и исполняются. Существует два ограничения, которые должны быть соблюдены при реализации такого варианта репликации: 
• перед настройкой репликации транзакций каждый Подписчик должен получить и развернуть полную резервную копию Издателя у себя; 
• у каждой реплицируемой таблицы должен быть первичный ключ. 
Схематично репликация транзакций показана на рис. 18.

2. Репликация мгновенного снимка (snapshot). Репликация осуществляется не по необходимости, а периодически, в рамках заранее настроенного интервала времени. Компонент СУБД Snapshot Agent генерирует схему и пакет данных для таблиц входящих в Публикацию, и агрегирует их в один файл, после чего, этот файл передается Подписчикам. Ряд условий, сопровождающих данный вид репликации: 
• база данных Distribution, в отличие от случая репликации транзакций, напрямую не используется; 
• при репликации мгновенного снимка возможен только один тип подписки - от Издателя к Подписчику;
• наличие первичного ключа в реплицируемых таблицах не обязательно. 
Схематично репликация мгновенного снимка показана на рис. 19.

3. Репликация слияния (merge). Данный вид репликации во многом дублирует репликацию мгновенного снимка, за исключением этапа, когда специальный Merge Agent изменяет файлы, содержащие схему и пакет данных для Публикации перед тем, как передать их Подписчикам. К файлу Публикации добавляются системные таблицы, первичные ключи (где это необходимо) и системные триггеры. Происходит этого для того, чтобы обеспечить оба типа подписки – как push, так и pull. Из-за существенных изменений в файле Публикации, при обновлении серверов могу возникать конфликты, которые будут решаться проверкой приоритетов (по умолчанию – «первый побеждает») или действиями пользователя. 
Схематично репликация слияния показана на рис. 20.

4. Одноранговая репликация (peer-to-peer). Вид репликации, при котором все серверы баз данных, участвующие в репликации не имеют четкого иерархического разделения. Перечислим особенности данного типа репликации:
• все серверы баз данных, участвующие в репликации настроены с возможностью функционирования как издатель-распространитель подписчик и по необходимости могут переключаться в любой режим работы; 
• все серверы обладают одним и тем же набором и схемами данных, постоянно синхронизируя их друг с другом; 
• каждый сервер манипулирует своим подмножеством данных, передавая его в режиме издателя остальным подписчикам; 
• любой конфликт обновления при передаче Публикации будет считаться ошибкой, требующей исправления. 
Схематично репликация слияния показана на рис. 21.
Сравнительное описание типов репликации показано в табл. 5.

17. Компоненты агента автоматизации администрирования баз данных.(Гладченко)

18. Сообщения об ошибках работы ядра СУБД. Уровни критичности ошибки.(Гладченко) 
Уровни от 0 до 10 обозначают просто информационные сообщения, где ничего не требуется исправлять. 
Все уровни ошибок от 11 до 16 указывают программные ошибки, которые могут быть разрешены пользователем.
Значения уровней 17 и 18 обозначают программные и аппаратные ошибки, которые обычно не завершают выполнение процесса. 
Все ошибки уровня 19 и выше являются неисправимыми системными ошибками. Соединение программы, вызвавшей такую ошибку, закрывается, после чего ее процесс удаляется.
19. Схемы МБД по умолчанию и пользовательские схемы (Гладченко)
Схемы МБД по умолчанию:

Пользовательская схема:

20. Фиксированные серверные роли и фиксированные роли БД. (Гладченко)
21. Схема общей модели безопасности БД.(Гладченко)
 
22. Таблица требований к ролям и пользователей. 
(Гладченко)
Таблица требований к ролям и пользователям – двухмерная таблица, написанная формальным языком. По одной оси откладываются роли и пользователи, по другой – элементы базы данных. На пересечениях фиксируется наличие или отсутствие прав доступа пользователя к объекту. При наличии этих прав, они конкретизируются. Пример:

23. Вредоносные действия, связанные с управлением cookies. (Коптелова)
Атака с модификацией cookies нацелена на перехват сеанса взаимодействия пользователя с сервером БД с целью получить конфиденциальную информацию.
Cookie - небольшой фрагмент данных, отправленный веб-сервером 
и хранимый на компьютере пользователя приложения баз данных. Веб-клиент (обычно веб-браузер) всякий раз при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса. Применяется для сохранения данных на стороне пользователя, на практике обычно используется для:
аутентификации пользователя
хранения персональных предпочтений и настроек
отслеживания состояния сеанса доступа
ведения статистики
Разберем принцип работы cookie-файлов на примере обмена данными сервера с пользовательским приложением:
   1. Получив команду пользователя, браузер отправляет веб-серверу короткий текст с HTTP-запросом. Например, для доступа к странице http://www.example.org/index.html, браузер отправляет на сервер www.example.org следующий запрос:
GET /index.html HTTP/1.1 HOST: www.example.org 
   2. Предположим, это первое посещение пользователем указанного URL. 
Сервер отвечает, отправляя запрашиваемую страницу, с дополнительным 
указанием браузеру сохранить файл cookie со следующим содержимым: 
HTTP:/1.1 200 ok Content-type: text/html SET-cookie: name=value (содержимое страницы). Это существенно облегчит браузеру загрузку страницы при повторном обращении. 
   3. При повторном обращении браузер прикрепит этот сгенерированный на сервере файл cookie к запросу, вот так: 
GET /index.html HTTP/1.1 HOST: www.example.org cookie: name=value Accept:/ 

Пример атаки подменой файла cookies: 
   4. Сервер отвечает, отправляя запрашиваемую страницу и, возможно, 
добавив новые значения в файл cookie, после переслав его на сторону 
пользователя.  
   5. Предположим, набор значений в файле cookie изменяется 
путем добавления новых строк SET- cookie: name=newvalue
   6. С момента добавления в файл cookie значения, которое может быть 
изменено, файл становится уязвимым, т.к. значения файлов
cookie могут устанавливаться скриптами на языке JavaScript, встроенными в текст страниц, или аналогичными скриптами, работающими в браузере. В JavaScript для этого используется объект document.cookie. Например, 
действие скрипта с аргументом document.cookie = "temperature=20" создаст запись cookie под именем «temperature» значением 20. 
   7. Перехватив в ходе сеанса обмена данными между приложением и 
сервером cookie, злоумышленник в списке параметров cookie потенциально может найти уязвимость. Значение изменяется, перехваченный и измененный файл cookie отправляется злоумышленником 
дальше на сервер. Например, такое изменение неудачного параметра cookie файла позволит злоумышленнику завладеть правами администратора сервера: isAdmin [0] -> [1].
24. Вредоносные действия в рамках blind-перебора. (Коптелова)
Смысл атаки blind-перебором – с помощью упорядоченного набора SQL запросов к серверу, основываясь на реакции СУБД (без должной настройки выдающие много информации), восстановить структуру таблиц с чувствительной информацией.
Последовательность действий в общем виде:
Выяснение названия и версии СУБД. 
Определение 1+ интересных для проникновения таблиц БД (обычно это списки пользователей, их паролей).
Последовательное восстановление метаинформации о структуре таблицы: определение количества, типов данных, названий, последовательности столбцов
Получив права на вставку новых значений, злоумышленник может внести строку со значениями своего пользователя с максимальным доступом к функциям БД.

25. Атака с использованием SQL-Injection. (Коптелова)
Атаки с использованием SQL-инъекций осуществляются с помощью динамических (встроенных) SQL инструкций, которые могут быть введены на стороне пользователя в незащищенную веб-форму, принимающую SQL параметры, или даже в строку URL, соединяющую пользователя с целевым сервером. Из-за своей простоты и эффективности, такие атаки являются наиболее распространенными (около 80% случаев). Пример атаки:
Предположим, пользовательское приложение включает функцию аутентификации через html-форму со следующим скриптом:

После ввода данных пользователем в СУБД отправляется запрос типа: 
SELECT * FROM users WHERE email = $_POST['email']
AND password = md5($_POST['password']);
Если результатом является существующая строка с Email и password (хешированным md5), пользователь успешно проходит аутентификацию на сервере. Зная структуру этого запроса, злоумышленнику достаточно с помощью динамического SQL заменить неизвестные ему параметры на условие, которое в случае выполнения выведет все значения из целевой таблицы с данными пользователей. Как правило, это условие инструкции SQL, исполняемое в любом случае, например в данном случае:
xxx@xxx.xxx' OR 1 = 1 LIMIT 1 -- ‘ ]

26. Мероприятия по укреплению сервера БД от вредоносных действий. (Коптелова)
меры по разработке политики безопасности организации и донесения ключевых позиций политики до всех сотрудников
меры по обеспечению безопасности сетевого окружения организации, включающие установку, настройку и мониторинг программного и аппаратного обеспечения организации
меры по защите сервера БД (определены в соответствии со стандартом безопасности серии NIST):
не позволять никому из пользователей работать за компьютером, на котором работает СУБД;
компьютер с СУБД должен находиться в помещении, запираемом на замок;
все визиты в помещение с компьютером с работающей СУБД должны записываться в журнал
меры, связанные с управлением учетными записями и ролями пользователей БД

